Metadata-Version: 2.1
Name: lightbulb-ext-neon
Version: 0.1.0
Summary: An add-on for Lightbulb making it easier to handle component interactions
Home-page: https://github.com/neonjonn/lightbulb-neon
Author: neonjonn
Author-email: 
License: GPL-3.0
Description: # Neon
        
        **Neon** is an add-on for [Lightbulb](https://github.com/tandemdude/hikari-lightbulb/) making it easier to handle component interactions.
        
        ## Installation
        
        ```bash
        pip install git+https://github.com/neonjonn/lightbulb-ext-neon.git
        ```
        
        ## Documentation
        
        [ReadTheDocs](https://lightbulb-neon.readthedocs.io/en/latest/)
        
        ## Usage
        
        ```python
        from lightbulb.ext import neon
        
        class Menu(neon.ComponentMenu):
            @neon.button("earth", "earth_button", hikari.ButtonStyle.SUCCESS, emoji="\N{DECIDUOUS TREE}")
            async def earth(self, button: neon.Button) -> None:
                await self.edit_msg(f"{button.emoji} - {button.custom_id}")
        
            @neon.option("Water", "water", emoji="\N{DROPLET}")
            @neon.option("Fire", "fire", emoji="\N{FIRE}")
            @neon.select_menu("sample_select_menu", "Pick fire or water!")
            async def select_menu_test(self, values: list) -> None:
                await self.edit_msg(f"You chose: {values[0]}!")
        
            @neon.button("Wind", "wind_button", hikari.ButtonStyle.PRIMARY, emoji="\N{WIND BLOWING FACE}\N{VARIATION SELECTOR-16}")
            @neon.button("Rock", "rock_button", hikari.ButtonStyle.SECONDARY, emoji="\N{MOYAI}")
            @neon.button_group()
            async def wind_rock(self, button: neon.Button) -> None:
                await self.edit_msg(f"You pressed: {button.custom_id}")
        
            @neon.on_timeout(disable_components=True)
            async def on_timeout(self) -> None:
                await self.edit_msg("\N{ALARM CLOCK} Timed out!")
        
        @bot.command
        @lightbulb.command("neon", "Check out Neon's component builder!")
        @lightbulb.implements(lightbulb.SlashCommand, lightbulb.PrefixCommand)
        async def neon_command(ctx: lightbulb.Context) -> None:
            menu = Menu(ctx, timeout=30)
            resp = await ctx.respond("Check out Neon's component builder!", components=menu.build())
            await menu.run(resp)
        ```
        
        ## Contributing
        
        If you wish to contribute to this project, please [open an issue](https://github.com/neonjonn/lightbulb-ext-neon/issues/new) first to describe your issue or feature request. 
        
        As soon as you've done that you may make a pull request, and I'll review your changes.
        
        ## Contributors
        
        * [thomm.o](https://github.com/tandemdude) - [Refactor, improve code, mypy compliance](https://github.com/neonjonn/lightbulb-ext-neon/pull/1)
        * [Coler6gamer](https://github.com/Coler6gamer) - [Removed blocking return statement](https://github.com/neonjonn/lightbulb-ext-neon/pull/2)
        
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Framework :: AsyncIO
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Application Frameworks
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8.0,<3.11
Description-Content-Type: text/markdown
